#include <stdio.h>
#include <iostream>
#include <math.h>

using namespace std;

//Proyectiles
double yin = 0;
double x0 = 0;
double v0 = 0;
double vx = 0;
double vy = 0;
double g = 0;
double tie = 0;
double alfa = 0;
double ax = 0;
double ay = 0;
double x = 0;
double y = 0;

//Colisiones elasticas
double m1=0;
double m2=0;
double v01=0;
double v02=0;

double vf1=0;
double vf2=0;

//Rebotes
double h=0;
double u=0;
double e=0;
double v1=0;
int rebotadas=0;

//Friccion
double k=0;
double cd=0;
double area=0;
double p=0;
double v=0;
double m=0;
double r=0;

//definicion de funciones
void movimiento_Rect_Unif(double x_ini, double vel_x, double tmp, double accel_x, double y_ini, double vel_y, double accel_y);
void col_Elastica(double masa1, double masa2, double v_ini1, double v_ini2, double vf1, double vf2);
void rebote(double altura, double gravedad, double vel_ini);
void friccion(double ar, double p, double vel, double Q, double masa, double cons_fri, double kons_fri);

int main()
{

}

void movimiento_Rect_Unif(double x_ini, double vel_x, double tmp, double accel_x, double y_ini, double vel_y, double accel_y)

{
    x0 = x_ini;
    yin = y_ini;
    vx = vel_x;
    tie = tmp;
    ax = accel_x;
    vy = vel_y;
    ay = accel_y;

    double num2 = 2;
    double num1 = 1;

    if ((ax==0)&&(ay==g)&&(x0==0))
    {
        vy = v0*(sin(alfa));
        vx = v0*(cos(alfa));
    }
    else
    {
        x=(x0*1)+(vx*tie)+((num1/num2)*ax*tie*tie);
        y=(yin*1)+(vy*tie)+((num1/num2)*ay*tie*tie);

    }

}

void col_Elastica(double masa1, double masa2, double v_ini1, double v_ini2, double vf1, double vf2)
{
    m1=masa1;
    m2=masa2;
    v01=v_ini1;
    v02=v_ini2;

    if(v02==0)
    {
        vf1=((m1-m2)/(m1+m2))*v01;
        vf2=((2*m1)/(m1+m2))*v01;
    }

    else
    {
        vf1=(((m1-m2)/(m1+m2))*v01)+(((2*m2)/(m1+m2))*v02);
        vf2=(((2*m1)/(m1+m2))*v01)-(((m1-m2)/(m1+m2))*v02);
    }

    cout<<vf1<<endl;
    cout<<vf2<<endl;
}

void rebote(double altura, double gravedad, double vel_ini){
    int n=1;

    h=altura;
    g=gravedad;
    u=vel_ini;

    while(u>0){

    u=sqrt(2*g*h);

    v1=u*e;
    h=pow(e,2*n)*h;
    rebotadas++;
    n++;

    cout<<"La nueva altura es: "<<h<<endl;
    cout<<"Este es el rebote nÃºmero: "<<rebotadas<<endl;

    }

}

void friccion(double ar, double dens, double masa, double cons_fri, double kons_fri, double velx, double vely){

    area = ar;
    p=dens;
    k=kons_fri;
    cd=cons_fri;
    m=masa;
    vx=velx;
    vy=vely;

    double ad=0;
    double Q=0;
    double addx=0;
    double addy=0;
    double adx=0;
    double ady=0;
    short int option;

    v=sqrt((vx*vx)+(vy*vy));
    Q=atan(vx/vy);

    ad=(1/(2*m))*p*(v*v)*cd*area;

    cout<<"Ingrese 1 para cuerpo esferico, de lo contrario ingrese cero: "<<endl;
    cin>>option;

    if(option==0){
        adx=(-(1/(2*m)))*p*(v*v)*cd*cos(Q);
        ady=(-(1/(2*m)))*p*(v*v)*cd*sin(Q);

        x=(x0*1)+(vx*tie)+((1/2)*adx*tie*tie);
        y=(yin*1)+(vy*tie)+((1/2)*ady*tie*tie);
    }
    else if(option==1)
    {
        addx=(-((k*v*v*r*r)/m)*(cos(Q)));
        addx=(-((k*v*v*r*r)/m)*(sin(Q)))-g;

        x=(x0*1)+(vx*tie)+((1/2)*addx*tie*tie);
        y=(yin*1)+(vy*tie)+((1/2)*addy*tie*tie);

    }
    else{
        cout<<"Opcion erronea"<<endl;
    }

}
